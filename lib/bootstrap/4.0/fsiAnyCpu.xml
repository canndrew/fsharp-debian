<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>fsiAnyCpu</name></assembly>
<members>
<member name="M:FSIstrings.SR.stoppedDueToError">
<summary>
 Stopped due to error\n
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:2)
</summary>
</member>
<member name="M:FSIstrings.SR.shadowCopyReferences">
<summary>
 Prevents references from being locked by the F# Interactive process
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:53)
</summary>
</member>
<member name="P:FSIstrings.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="P:FSIstrings.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSIstrings.SR.fsiUse">
<summary>
 Use the given file on startup as initial input
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:11)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiUsage(System.String)">
<summary>
 Usage: %s &lt;options&gt; [script.fsx [&lt;arguments&gt;]]
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:3)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiUnexpectedThreadAbortException">
<summary>
 - Unexpected ThreadAbortException (Ctrl-C) during event handling: Trying to restart...
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:49)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiTurnedTimingOn">
<summary>
 --&gt; Timing now on
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:47)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiTurnedTimingOff">
<summary>
 --&gt; Timing now off
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:48)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiTimeInfoMainString(System.String,System.String,System.String)">
<summary>
 Real: %s, CPU: %s, GC %s
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:26)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiTimeInfoGCGenerationLabelSomeShorthandForTheWordGeneration">
<summary>
 gen
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:27)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiRemaining">
<summary>
 Treat remaining arguments as command line arguments, accessed using fsi.CommandLineArgs
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:13)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiReadline">
<summary>
 Support TAB completion in console (on by default)
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:18)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiQuiet">
<summary>
 Suppress fsi writing to stdout
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:17)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiProductName(System.String)">
<summary>
 F# Interactive for F# %s
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:52)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiMiscellaneous">
<summary>
 - MISCELLANEOUS -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:8)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiLoadingFilesPrefixText">
<summary>
 Loading
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:38)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiLoad">
<summary>
 #load the given file on startup
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:12)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiLineTooLong">
<summary>
 Warning: line too long, ignoring some characters\n
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:25)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiLanguage">
<summary>
 - LANGUAGE -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:7)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiInvalidDirective(System.String,System.String)">
<summary>
 Invalid directive &apos;#%s %s&apos;
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:24)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiInvalidAssembly(System.String)">
<summary>
 &apos;%s&apos; is not a valid assembly name
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:22)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHeader3(System.String)">
<summary>
       See &apos;%s&apos; for options
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:37)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHeader2commandLine">
<summary>
   F# Interactive command line options:
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:36)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHeader1directives">
<summary>
   F# Interactive directives:
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:29)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashtimeInfo">
<summary>
 Toggle timing on/off
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:33)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashrInfo">
<summary>
 Reference (dynamically load) the given DLL
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:30)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashquitInfo">
<summary>
 Exit
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:35)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashloadInfo">
<summary>
 Load the given file(s) as if compiled and referenced
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:32)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashhelpInfo">
<summary>
 Display help
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:34)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiIntroTextHashIInfo">
<summary>
 Add the given search path for referenced DLLs
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:31)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiInterrupt">
<summary>
 \n- Interrupt\n
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:39)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiInputFiles">
<summary>
 - INPUT FILES -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:4)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiHelp">
<summary>
 Display this usage message (Short form: -?)
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:14)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiGui">
<summary>
 Execute interactions on a Windows Forms event loop (on by default)
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:16)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiFailedToResolveAssembly(System.String)">
<summary>
 Failed to resolve assembly &apos;%s&apos;
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:50)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiExit">
<summary>
 \n- Exit...\n
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:40)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiExec">
<summary>
 Exit fsi after loading the files or running the .fsx script given on the command line
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:15)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiExceptionRaisedStartingServer(System.String)">
<summary>
 Exception raised when starting remoting server.\n%s
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:10)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiExceptionDuringPrettyPrinting(System.String)">
<summary>
 \n\nException raised during pretty printing.\nPlease report this so it can be fixed.\nTrace: %s\n
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:28)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiErrorsAndWarnings">
<summary>
 - ERRORS AND WARNINGS -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:6)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiEmitDebugInfoInQuotations">
<summary>
 Emit debug information in quotations
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:19)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiDirectoryDoesNotExist(System.String)">
<summary>
 Directory &apos;%s&apos; doesn&apos;t exist
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:23)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiDidAHashrWithStaleWarning(System.String)">
<summary>
 --&gt; Referenced &apos;%s&apos; (an assembly with a different timestamp has already been referenced from this location, reset fsi to load the updated assembly)
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:45)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiDidAHashrWithLockWarning(System.String)">
<summary>
 --&gt; Referenced &apos;%s&apos; (file may be locked by F# Interactive process)
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:44)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiDidAHashr(System.String)">
<summary>
 --&gt; Referenced &apos;%s&apos;
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:43)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiDidAHashI(System.String)">
<summary>
 --&gt; Added &apos;%s&apos; to library include path
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:46)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiCouldNotInstallCtrlCHandler(System.String)">
<summary>
 Failed to install ctrl-c handler - Ctrl-C handling will not be available. Error was:\n\t%s
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:42)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiConsoleProblem">
<summary>
 A problem occurred starting the F# Interactive process. This may be due to a known problem with background process console support for Unicode-enabled applications on some Windows systems. Try selecting Tools-&gt;Options-&gt;F# Interactive for Visual Studio and enter &apos;--fsi-server-no-unicode&apos;.
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:21)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiCodeGeneration">
<summary>
 - CODE GENERATION -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:5)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiBindingSessionTo(System.String)">
<summary>
 Binding session to &apos;%s&apos;...
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:51)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiBanner3">
<summary>
 For help type #help;;
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:20)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiAdvanced">
<summary>
 - ADVANCED -
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:9)
</summary>
</member>
<member name="M:FSIstrings.SR.fsiAbortingMainThread">
<summary>
 - Aborting main thread...
 (Originally from C:\projects\fsharp\src\fsharp\fsi\FSIstrings.txt:41)
</summary>
</member>
<member name="M:FSIstrings.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="M:Internal.Utilities.Collections.List.referenceDistinct``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Return each distinct item in the list using reference equality.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.List.groupByFirst``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
<summary>
 Return a new list with one element for each unique &apos;Key. Multiple &apos;TValues are flattened. 
 The original order of the first instance of &apos;Key is preserved.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.TryGetAny(`0,`1)">
<summary>
 Get the value for the given key or &lt;c&gt;None&lt;/c&gt; if not already available.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.TryGet(`0,`1)">
<summary>
 Get the value for the given key or None if not already available
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.Set(`0,`1,`2)">
<summary>
 Set the given key. 
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.Resize(`0,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Resize
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.Remove(`0,`1)">
<summary>
 Remove the given value from the mru cache.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.MruCache`3.Clear(`0)">
<summary>
 Clear out the cache.
</summary>
</member>
<member name="T:Internal.Utilities.Collections.MruCache`3">
<summary>
 Simple priority caching for a small number of key/value associations.
 This cache may age-out results that have been Set by the caller.
 Because of this, the caller must be able to tolerate values 
 that aren&apos;t what was originally passed to the Set function.     

 Concurrency: This collection is thread-safe, though concurrent use may result in different
 threads seeing different live sets of cached items, and may result in the onDiscard action
 being called multiple times. In practice this means the collection is only safe for concurrent
 access if there is no discard action to execute.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.TryPeekKeyValue(`0,`1)">
<summary>
 Lookup the value without making it the most recent.
 Returns the original key value because the areSame function
 may have unified two different keys.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.TryGetKeyValue(`0,`1)">
<summary>
 Lookup a value and make it the most recent.
 Returns the original key value because the areSame function
 may have unified two different keys.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.TryGet(`0,`1)">
<summary>
 Lookup a value and make it the most recent. Return &lt;c&gt;None&lt;/c&gt; if it wasn&apos;t there.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.Resize(`0,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Resize
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.Remove(`0,`1)">
<summary>
 Remove the given value from the collection.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.Put(`0,`1,`2)">
<summary>
 Add an element to the collection. Make it the most recent.
</summary>
</member>
<member name="M:Internal.Utilities.Collections.AgedLookup`3.Clear(`0)">
<summary>
 Remove all elements.
</summary>
</member>
<member name="T:Internal.Utilities.Collections.AgedLookup`3">
<summary>
 Simple aging lookup table. When a member is accessed it&apos;s
 moved to the top of the list and when there are too many elements
 the least-recently-accessed element falls of the end.
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.ReadLineConsole.Prompt">
<summary>
 Inset all inputs by this amount
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Options">
<summary>
 List of available optionsCache
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.History">
<summary>
 Class managing the command History.
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Utils">
<summary>
 Cursor position management
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.ConsoleOptions">
<summary>
 System.Console.ReadKey appears to return an ANSI character (not the expected the unicode character).
 When this fix flag is true, this byte is converted to a char using the System.Console.InputEncoding.
 This is a code-around for bug://1345.
 Fixes to System.Console.ReadKey may break this code around, hence the option here.
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.LCID">
<summary>
 A host calls this to get the active language ID if provided by fsi-server-lcid
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.IsGui">
<summary>
 A host calls this to determine if the --gui parameter is active
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.Run">
<summary>
 Performs these steps:
    - Load the dummy interaction, if any
    - Set up exception handling, if any
    - Load the initial files, if any
    - Start the background thread to read the standard input, if any
    - Sit in the GUI event loop indefinitely, if needed

 This method only returns after &quot;exit&quot;. The method repeatedly calls the event loop and
 the thread may be subject to Thread.Abort() signals if Interrupt() is used, giving rise 
 to internal ThreadAbortExceptions.

 A background thread is started by this thread to read from the inReader and/or console reader.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.ReportUnhandledException(System.Exception)">
<summary>
 A host calls this to report an unhandled exception in a standard way, e.g. an exception on the GUI thread gets printed to stderr
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.Interrupt">
<summary>
 Load the dummy interaction, load the initial files, and,
 if interacting, start the background thread to read the standard input.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession.GetCompletions(System.String)">
<summary>
 A host calls this to get the completions for a long identifier, e.g. in the console
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSession">
<summary>
 The primary type, representing a full F# Interactive session, reading from the given
 text input, writing to the given text output and error writers.
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.DummyForm">
<summary>
Use a dummy to access protected member
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionProcessor.StartStdinReadAndProcessThread(Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger)">
<summary>
 Start the background thread used to read the input reader and/or console

 This is the main stdin loop, running on the stdinReaderThread.
 
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionProcessor.ParseAndExecOneSetOfInteractionsFromLexbuf``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,System.Tuple{Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionStepStatus}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,System.Tuple{Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionStepStatus}}},Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,Microsoft.FSharp.Compiler.LexFilter.LexFilter,Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger)">
<summary>
 Parse then process one parsed interaction.  

 During normal execution, this initially runs on the parser
 thread, then calls runCodeOnMainThread when it has completed 
 parsing and needs to typecheck and execute a definition. This blocks the parser thread
 until execution has competed on the GUI thread.

 During processing of startup scripts, this runs on the main thread.

 This is blocking: it reads until one chunk of input have been received, unless IsPastEndOfStream is true
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionProcessor.LoadDummyInteraction(Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.CompilationThreadToken,Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger)">
<summary>
 Send a dummy interaction through F# Interactive, to ensure all the most common code generation paths are 
 JIT&apos;ed and ready for use.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionProcessor.EvalIncludedScripts(Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.CompilationThreadToken,Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger)">
<summary>
 Load the source files, one by one. Called on the main thread.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiInteractionProcessor.EvalIncludedScript(Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.CompilationThreadToken,Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,System.String,Microsoft.FSharp.Compiler.Range.range,Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger)">
<summary>
 Perform an &quot;include&quot; on a script file (i.e. a script file specified on the command line)
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompiler.EvalParsedExpression(Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.CompilationThreadToken,Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger,Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,Microsoft.FSharp.Compiler.Ast.SynExpr)">
<summary>
 Evaluate the given expression and produce a new interactive state.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompiler.EvalParsedDefinitions(Microsoft.FSharp.Compiler.AbstractIL.Internal.Library.CompilationThreadToken,Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger,Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompilerState,System.Boolean,System.Boolean,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Compiler.Ast.SynModuleDecl})">
<summary>
 Evaluate the given definitions and produce a new interactive state.
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiDynamicCompiler">
<summary>
 Encapsulates the coordination of the typechecking, optimization and code generation
 components of the F# compiler for interactively executed fragments of code.

 A single instance of this object is created per interactive session.
</summary>
</member>
<member name="F:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleInput.firstLine">
<summary>
 When using a key-reading console this holds the first line after it is read
</summary>
</member>
<member name="F:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleInput.consoleReaderStartupDone">
<summary>
 This threading event gets set after the first-line-reader has finished its work
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleInput.TryGetFirstLine">
<summary>
 Peek on the standard input so that the user can type into it from a console window.
 Try to get the first line, if we snarfed it while probing.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleInput.TryGetConsole">
<summary>
 Try to get the console, if it appears operational.
</summary>
</member>
<member name="F:Microsoft.FSharp.Compiler.Interactive.Shell.FsiCommandLineOptions.sourceFiles">
<summary>
 Process command line, flags and collect filenames.
 The ParseCompilerOptions function calls imperative function to process &quot;real&quot; args 
 Rather than start processing, just collect names, then process them. 
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiCommandLineOptions">
<summary>
 Process the command line options 
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.ErrorLoggerThatStopsOnFirstError">
<summary>
 This ErrorLogger reports all warnings, but raises StopProcessing on first error or early exit
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleOutput.uprintf``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 uprintf to write usual responses to stdout (suppressed by --quiet), with various pre/post newlines
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleOutput">
<summary>
 Encapsulates functions used to write to outWriter and errorWriter
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiStdinSyphon.Reset">
<summary>
 Clears the syphon text
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiStdinSyphon.PrintError(Microsoft.FSharp.Compiler.CompileOps.TcConfigBuilder,Microsoft.FSharp.Compiler.ErrorLogger.PhasedDiagnostic)">
<summary>
 Display the given error.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiStdinSyphon.GetLine(System.String,System.Int32)">
<summary>
 Gets the indicated line in the syphon text
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiStdinSyphon.Add(System.String)">
<summary>
 Adds a new line to the syphon text
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiStdinSyphon">
<summary>
 Used to make a copy of input in order to include the input when displaying the error text.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter.PrintValue(Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinterMode,Internal.Utilities.StructuredFormat.FormatOptions,System.Object,System.Type)">
<summary>
 Generate a layout for an actual F# value, where we know the value has the given static type.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter.InvokeExprPrinter(Microsoft.FSharp.Compiler.Tastops.DisplayEnv,Microsoft.FSharp.Compiler.AbstractIL.ILRuntimeWriter.emEnv,Microsoft.FSharp.Compiler.IlxGen.IlxAssemblyGenerator,Microsoft.FSharp.Compiler.Tast.Val)">
<summary>
 Fetch the saved value of an expression out of the &apos;it&apos; register and show it.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter.InvokeDeclLayout(Microsoft.FSharp.Compiler.AbstractIL.ILRuntimeWriter.emEnv,Microsoft.FSharp.Compiler.IlxGen.IlxAssemblyGenerator,Microsoft.FSharp.Compiler.Tast.Val)">
<summary>
 Display the signature of an F# value declaration, along with its actual value.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter.GetFsiPrintOptions">
<summary>
 Get the print options used when formatting output using the structured printer.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter.GetEvaluationContext(Microsoft.FSharp.Compiler.AbstractIL.ILRuntimeWriter.emEnv)">
<summary>
 Get the evaluation context used when inverting the storage mapping of the ILRuntimeWriter.
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiValuePrinter">
<summary>
 Used to print value signatures along with their values, according to the current
 set of pretty printers installed in the system, and default printing rules.
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.ShowProperties">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.ShowIEnumerable">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.ShowDeclarationValues">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.PrintWidth">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.PrintSize">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.PrintLength">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.PrintDepth">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.FormatProvider">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.FloatingPointFormat">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="P:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.AddedPrinters">
<summary>
 Called by the evaluation session to ask the host for parameters to format text for output
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.SetEventLoop(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Object},System.Object},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Called by the evaluation session to ask the host to enter a dispatch loop like Application.Run().
 Only called if --gui option is used (which is the default).
 Gets called towards the end of startup and every time a ThreadAbort escaped to the backup driver loop.
 Return true if a &apos;restart&apos; is required, which is a bit meaningless.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.ReportUserCommandLineArgs(System.String[])">
<summary>
 The evaluation session calls this to report the preferred view of the command line arguments after 
 stripping things like &quot;/use:file.fsx&quot;, &quot;-r:Foo.dll&quot; etc.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.EventLoopScheduleRestart">
<summary>
 Schedule a restart for the event loop.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.EventLoopRun">
<summary>
 Called by the evaluation session to ask the host to enter a dispatch loop like Application.Run().
 Only called if --gui option is used (which is the default).
 Gets called towards the end of startup and every time a ThreadAbort escaped to the backup driver loop.
 Return true if a &apos;restart&apos; is required, which is a bit meaningless.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig.EventLoopInvoke``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Request that the given operation be run synchronously on the event loop.
</summary>
</member>
<member name="T:Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig">
<summary>
 User-configurable information that changes how F# Interactive operates, stored in the &apos;fsi&apos; object
 and accessible via the programming model
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.DriveFsiEventLoop(Microsoft.FSharp.Compiler.Interactive.Shell.FsiEvaluationSessionHostConfig,Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleOutput)">
<summary>
 Repeatedly drive the event loop (e.g. Application.Run()) but catching ThreadAbortException and re-running.

 This gives us a last chance to catch an abort on the main execution thread.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.WinFormsEventLoop(Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleOutput,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 This is the event loop implementation for winforms
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.SetServerCodePages(Microsoft.FSharp.Compiler.Interactive.Shell.FsiCommandLineOptions)">
<summary>
 Set the input/output encoding. The use of a thread is due to a known bug on 
 on Vista where calls to Console.InputEncoding can block the process.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.SetCurrentUICultureForThread(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Set the current ui culture for the current thread.
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.directoryName(System.String)">
<summary>
 Get the directory name from a string, with some defaults if it doesn&apos;t have one
</summary>
</member>
<member name="M:Microsoft.FSharp.Compiler.Interactive.Shell.ErrorLogger.AbortOnError(Microsoft.FSharp.Compiler.ErrorLogger.ErrorLogger,Microsoft.FSharp.Compiler.Interactive.Shell.FsiConsoleOutput)">
<summary>
 A helper function to check if its time to abort
</summary>
</member>
</members>
</doc>
